local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Variables for FPS and Anti-Lag
local fpsEnabled = false
local fpsValue = 60
local antiLagEnabled = false
local antiLagCoroutine

-- Variables for additional toggles
local removeTexturesEnabled = false
local removeTexturesCoroutine
local graySkyEnabled = false
local graySkyCoroutine
local removeParticlesEnabled = false
local removeParticlesCoroutine
local removeLightsEnabled = false
local removeLightsCoroutine
local removePropsEnabled = false
local removePropsCoroutine
local blockRemoteEventsEnabled = false
local removeClothesEnabled = false
local removeClothesCoroutine

-- FPS Rate Slider
local FPSSlider = Tabs.Main:AddSlider("FPSSlider", {
    Title = "Taxa de FPS",
    Description = "Escolha a taxa de FPS desejada",
    Default = 60,
    Min = 60,
    Max = 144,
    Rounding = 0,
    Callback = function(Value)
        fpsValue = Value
        if fpsEnabled then
            setfpscap(fpsValue)
        end
    end
})

FPSSlider:SetValue(60)

-- FPS Toggle
local FPSToggle = Tabs.Main:AddToggle("FPSToggle", {
    Title = "Ativar Taxa de FPS",
    Description = "Ativa/Desativa a limitação de FPS",
    Default = false,
    Callback = function(Value)
        fpsEnabled = Value
        if fpsEnabled then
            setfpscap(fpsValue)
            Fluent:Notify({
                Title = "FPS Ativado",
                Content = "FPS definido para " .. fpsValue .. "hz",
                Duration = 3
            })
        else
            setfpscap(0) -- Remove FPS limit
            Fluent:Notify({
                Title = "FPS Desativado",
                Content = "Limitação de FPS removida",
                Duration = 3
            })
        end
    end
})

-- Anti-Lag Toggle
local AntiLagToggle = Tabs.Main:AddToggle("AntiLagToggle", {
    Title = "Anti-Lag",
    Description = "Remove elementos visuais para melhorar performance (atualiza a cada 10s)",
    Default = false,
    Callback = function(Value)
        antiLagEnabled = Value
        if antiLagEnabled then
            -- Start anti-lag coroutine
            antiLagCoroutine = coroutine.create(function()
                while antiLagEnabled do
                    -- Remove textures and images
                    for _, obj in pairs(workspace:GetDescendants()) do
                        if obj:IsA("Decal") or obj:IsA("Texture") then
                            obj.Transparency = 1
                        elseif obj:IsA("SurfaceGui") or obj:IsA("BillboardGui") or obj:IsA("ScreenGui") then
                            if obj.Parent ~= game.Players.LocalPlayer.PlayerGui then
                                obj.Enabled = false
                            end
                        elseif obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
                            if obj:FindFirstAncestorOfClass("PlayerGui") ~= game.Players.LocalPlayer.PlayerGui then
                                obj.Visible = false
                            end
                        end
                    end
                    
                    -- Remove player UIs (except local player)
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and player.Character then
                            for _, gui in pairs(player.Character:GetChildren()) do
                                if gui:IsA("BillboardGui") or gui:IsA("SurfaceGui") then
                                    gui.Enabled = false
                                end
                            end
                        end
                    end
                    
                    -- Remove text elements visible to other players
                    for _, obj in pairs(game.Workspace:GetDescendants()) do
                        if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
                            if obj:FindFirstAncestorOfClass("PlayerGui") ~= game.Players.LocalPlayer.PlayerGui then
                                obj.Visible = false
                            end
                        end
                    end
                    
                    -- Reduce rendering quality
                    game:GetService("RunService").RenderStepped:Connect(function()
                        settings().Rendering.QualityLevel = "Level01"
                    end)
                    
                    wait(20) -- Update every 20 seconds
                end
            end)
            coroutine.resume(antiLagCoroutine)
            
            Fluent:Notify({
                Title = "Anti-Lag Ativado",
                Content = "Elementos visuais removidos para melhor performance",
                Duration = 3
            })
        else
            -- Restore elements when disabled
            for _, obj in pairs(workspace:GetDescendants()) do
                if obj:IsA("Decal") or obj:IsA("Texture") then
                    obj.Transparency = 0
                elseif obj:IsA("SurfaceGui") or obj:IsA("BillboardGui") or obj:IsA("ScreenGui") then
                    obj.Enabled = true
                elseif obj:IsA("ImageLabel") or obj:IsA("ImageButton") or obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
                    obj.Visible = true
                end
            end
            
            -- Restore player UIs
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character then
                    for _, gui in pairs(player.Character:GetChildren()) do
                        if gui:IsA("BillboardGui") or gui:IsA("SurfaceGui") then
                            gui.Enabled = true
                        end
                    end
                end
            end
            
            -- Restore rendering quality
            settings().Rendering.QualityLevel = "Automatic"
            
            Fluent:Notify({
                Title = "Anti-Lag Desativado",
                Content = "Elementos visuais restaurados",
                Duration = 3
            })
        end
    end
})

-- Remove Players Textures Toggle
local RemoveTexturesToggle = Tabs.Main:AddToggle("RemoveTexturesToggle", {
    Title = "Remover Texturas dos Players",
    Description = "Remove texturas de todos os players exceto você (atualiza a cada 20s)",
    Default = false,
    Callback = function(Value)
        removeTexturesEnabled = Value
        if removeTexturesEnabled then
            removeTexturesCoroutine = coroutine.create(function()
                while removeTexturesEnabled do
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and player.Character then
                            for _, part in pairs(player.Character:GetDescendants()) do
                                if part:IsA("BasePart") then
                                    part.Material = Enum.Material.Neon
                                    part.Color = Color3.new(0.5, 0.5, 0.5) -- Gray color
                                    -- Remove textures
                                    for _, texture in pairs(part:GetChildren()) do
                                        if texture:IsA("Decal") or texture:IsA("Texture") then
                                            texture.Transparency = 1
                                        end
                                    end
                                end
                            end
                        end
                    end
                    wait(20) -- Update every 20 seconds
                end
            end)
            coroutine.resume(removeTexturesCoroutine)
            
            Fluent:Notify({
                Title = "Texturas Removidas",
                Content = "Texturas dos players removidas (exceto você)",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Texturas Restauradas",
                Content = "Texturas dos players restauradas",
                Duration = 3
            })
        end
    end
})

-- Gray Sky Toggle
local GraySkyToggle = Tabs.Main:AddToggle("GraySkyToggle", {
    Title = "Céu e Botões Cinza",
    Description = "Deixa o céu e elementos cinza para melhor visibilidade (atualiza a cada 20s)",
    Default = false,
    Callback = function(Value)
        graySkyEnabled = Value
        if graySkyEnabled then
            graySkyCoroutine = coroutine.create(function()
                while graySkyEnabled do
                    -- Make sky gray
                    local Lighting = game:GetService("Lighting")
                    Lighting.SunAngularSize = 0
                    Lighting.StarCount = 0
                    Lighting.SunSize = 0
                    Lighting.SkyboxBk = "http://www.roblox.com/asset/?id=0"
                    Lighting.SkyboxDn = "http://www.roblox.com/asset/?id=0"
                    Lighting.SkyboxFt = "http://www.roblox.com/asset/?id=0"
                    Lighting.SkyboxLf = "http://www.roblox.com/asset/?id=0"
                    Lighting.SkyboxRt = "http://www.roblox.com/asset/?id=0"
                    Lighting.SkyboxUp = "http://www.roblox.com/asset/?id=0"
                    
                    -- Make terrain and parts gray
                    for _, obj in pairs(workspace:GetDescendants()) do
                        if obj:IsA("BasePart") and obj.Parent ~= game.Players.LocalPlayer.Character then
                            obj.Color = Color3.new(0.5, 0.5, 0.5)
                        elseif obj:IsA("Terrain") then
                            obj.WaterColor = Color3.new(0.5, 0.5, 0.5)
                        end
                    end
                    
                    wait(20) -- Update every 20 seconds
                end
            end)
            coroutine.resume(graySkyCoroutine)
            
            Fluent:Notify({
                Title = "Céu Cinza Ativado",
                Content = "Céu e elementos ficaram cinza",
                Duration = 3
            })
        else
            -- Restore original sky
            local Lighting = game:GetService("Lighting")
            Lighting.SunAngularSize = 21
            Lighting.StarCount = 3000
            Lighting.SunSize = 21
            
            Fluent:Notify({
                Title = "Céu Restaurado",
                Content = "Céu e cores restaurados",
                Duration = 3
            })
        end
    end
})

-- Remove Particles Toggle
local RemoveParticlesToggle = Tabs.Main:AddToggle("RemoveParticlesToggle", {
    Title = "Remover Partículas",
    Description = "Remove todas as partículas do jogo (atualiza a cada 20s)",
    Default = false,
    Callback = function(Value)
        removeParticlesEnabled = Value
        if removeParticlesEnabled then
            removeParticlesCoroutine = coroutine.create(function()
                while removeParticlesEnabled do
                    for _, obj in pairs(workspace:GetDescendants()) do
                        if obj:IsA("ParticleEmitter") or obj:IsA("Smoke") or obj:IsA("Fire") or obj:IsA("Sparkles") then
                            obj.Enabled = false
                        elseif obj:IsA("Beam") or obj:IsA("Trail") then
                            obj.Enabled = false
                        end
                    end
                    
                    -- Also check in players
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player.Character then
                            for _, obj in pairs(player.Character:GetDescendants()) do
                                if obj:IsA("ParticleEmitter") or obj:IsA("Smoke") or obj:IsA("Fire") or obj:IsA("Sparkles") then
                                    obj.Enabled = false
                                elseif obj:IsA("Beam") or obj:IsA("Trail") then
                                    obj.Enabled = false
                                end
                            end
                        end
                    end
                    
                    wait(20) -- Update every 20 seconds
                end
            end)
            coroutine.resume(removeParticlesCoroutine)
            
            Fluent:Notify({
                Title = "Partículas Removidas",
                Content = "Todas as partículas foram desabilitadas",
                Duration = 3
            })
        else
            -- Restore particles
            for _, obj in pairs(workspace:GetDescendants()) do
                if obj:IsA("ParticleEmitter") or obj:IsA("Smoke") or obj:IsA("Fire") or obj:IsA("Sparkles") then
                    obj.Enabled = true
                elseif obj:IsA("Beam") or obj:IsA("Trail") then
                    obj.Enabled = true
                end
            end
            
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character then
                    for _, obj in pairs(player.Character:GetDescendants()) do
                        if obj:IsA("ParticleEmitter") or obj:IsA("Smoke") or obj:IsA("Fire") or obj:IsA("Sparkles") then
                            obj.Enabled = true
                        elseif obj:IsA("Beam") or obj:IsA("Trail") then
                            obj.Enabled = true
                        end
                    end
                end
            end
            
            Fluent:Notify({
                Title = "Partículas Restauradas",
                Content = "Partículas foram reabilitadas",
                Duration = 3
            })
        end
    end
})

-- Remove Lights Toggle
local RemoveLightsToggle = Tabs.Main:AddToggle("RemoveLightsToggle", {
    Title = "Remover Luzes",
    Description = "Remove todas as luzes do jogo (atualiza a cada 20s)",
    Default = false,
    Callback = function(Value)
        removeLightsEnabled = Value
        if removeLightsEnabled then
            removeLightsCoroutine = coroutine.create(function()
                while removeLightsEnabled do
                    for _, obj in pairs(workspace:GetDescendants()) do
                        if obj:IsA("PointLight") or obj:IsA("SpotLight") or obj:IsA("SurfaceLight") then
                            obj.Enabled = false
                        end
                    end
                    
                    -- Also check in players
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player.Character then
                            for _, obj in pairs(player.Character:GetDescendants()) do
                                if obj:IsA("PointLight") or obj:IsA("SpotLight") or obj:IsA("SurfaceLight") then
                                    obj.Enabled = false
                                end
                            end
                        end
                    end
                    
                    -- Adjust lighting settings
                    local Lighting = game:GetService("Lighting")
                    Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
                    Lighting.Brightness = 2
                    Lighting.OutdoorAmbient = Color3.new(0.5, 0.5, 0.5)
                    
                    wait(20) -- Update every 20 seconds
                end
            end)
            coroutine.resume(removeLightsCoroutine)
            
            Fluent:Notify({
                Title = "Luzes Removidas",
                Content = "Todas as luzes foram desabilitadas",
                Duration = 3
            })
        else
            -- Restore lights
            for _, obj in pairs(workspace:GetDescendants()) do
                if obj:IsA("PointLight") or obj:IsA("SpotLight") or obj:IsA("SurfaceLight") then
                    obj.Enabled = true
                end
            end
            
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character then
                    for _, obj in pairs(player.Character:GetDescendants()) do
                        if obj:IsA("PointLight") or obj:IsA("SpotLight") or obj:IsA("SurfaceLight") then
                            obj.Enabled = true
                        end
                    end
                end
            end
            
            -- Restore lighting settings
            local Lighting = game:GetService("Lighting")
            Lighting.Ambient = Color3.new(0, 0, 0)
            Lighting.Brightness = 1
            Lighting.OutdoorAmbient = Color3.new(0.5, 0.5, 0.5)
            
            Fluent:Notify({
                Title = "Luzes Restauradas",
                Content = "Luzes foram reabilitadas",
                Duration = 3
            })
        end
    end
})

-- Remove Props/Objects Toggle
local RemovePropsToggle = Tabs.Main:AddToggle("RemovePropsToggle", {
    Title = "Remover Props/Objetos",
    Description = "Remove objetos e props do cenário (mantém apenas partes essenciais)",
    Default = false,
    Callback = function(Value)
        removePropsEnabled = Value
        if removePropsEnabled then
            removePropsCoroutine = coroutine.create(function()
                while removePropsEnabled do
                    for _, obj in pairs(workspace:GetDescendants()) do
                        if obj:IsA("BasePart") and obj.Parent ~= game.Players.LocalPlayer.Character then
                            -- Keep essential parts like terrain, spawn points, etc.
                            local keepPart = false
                            
                            -- Keep parts that are likely terrain or important structures
                            if obj.Name == "Baseplate" or obj.Name == "SpawnLocation" or 
                               obj.Name == "Terrain" or obj.Parent.Name == "Terrain" or
                               obj:FindFirstAncestorOfClass("Model") and obj:FindFirstAncestorOfClass("Model").Name:find("Spawn") then
                                keepPart = true
                            end
                            
                            -- Remove decorative objects, tools, accessories, etc.
                            if not keepPart and (obj.Parent:IsA("Tool") or obj.Parent:IsA("Hat") or 
                               obj.Parent:IsA("Accessory") or obj.Name:find("Decoration") or 
                               obj.Name:find("Prop") or obj.Size.X < 50 and obj.Size.Y < 50 and obj.Size.Z < 50) then
                                obj.Transparency = 1
                                obj.CanCollide = false
                            end
                        end
                        
                        -- Remove mesh parts and special meshes that are decorative
                        if obj:IsA("MeshPart") or obj:IsA("SpecialMesh") then
                            if not (obj:FindFirstAncestorOfClass("Model") and 
                                   (obj:FindFirstAncestorOfClass("Model"):FindFirstChild("Humanoid") or
                                    obj:FindFirstAncestorOfClass("Model").Name:find("Spawn"))) then
                                obj.Parent = nil
                            end
                        end
                    end
                    wait(2) -- Update every 2 seconds
                end
            end)
            coroutine.resume(removePropsCoroutine)
            
            Fluent:Notify({
                Title = "Props Removidos",
                Content = "Objetos e props do cenário foram removidos",
                Duration = 3
            })
        else
            -- Note: Props removal is hard to reverse, so we just notify
            Fluent:Notify({
                Title = "Props Toggle Desativado",
                Content = "Recarregue o jogo para restaurar props",
                Duration = 3
            })
        end
    end
})

-- Block Remote Events Toggle
local BlockRemoteEventsToggle = Tabs.Main:AddToggle("BlockRemoteEventsToggle", {
    Title = "Bloquear Remote Events",
    Description = "Bloqueia Remote Events de outros players (pode causar lag nos outros)",
    Default = false,
    Callback = function(Value)
        blockRemoteEventsEnabled = Value
        if blockRemoteEventsEnabled then
            -- Hook and block remote events
            local oldNamecall = getrawmetatable(game).__namecall
            setreadonly(getrawmetatable(game), false)
            
            getrawmetatable(game).__namecall = function(self, ...)
                local method = getnamecallmethod()
                local args = {...}
                
                if method == "FireServer" or method == "InvokeServer" then
                    -- Block if not from local player
                    local caller = getcallingscript()
                    if caller and caller.Parent ~= game.Players.LocalPlayer then
                        return -- Block the remote event
                    end
                end
                
                return oldNamecall(self, ...)
            end
            
            setreadonly(getrawmetatable(game), true)
            
            Fluent:Notify({
                Title = "Remote Events Bloqueados",
                Content = "Remote Events de outros players foram bloqueados",
                Duration = 3
            })
        else
            -- Note: Restoring the original namecall is complex
            Fluent:Notify({
                Title = "Remote Events Desbloqueados",
                Content = "Recarregue o jogo para restaurar completamente",
                Duration = 3
            })
        end
    end
})

-- Remove Player Clothes Toggle
local RemoveClothesToggle = Tabs.Main:AddToggle("RemoveClothesToggle", {
    Title = "Remover Roupas dos Players",
    Description = "Remove roupas, acessórios e items 3D de todos os players (exceto você)",
    Default = false,
    Callback = function(Value)
        removeClothesEnabled = Value
        if removeClothesEnabled then
            removeClothesCoroutine = coroutine.create(function()
                while removeClothesEnabled do
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and player.Character then
                            local character = player.Character
                            
                            -- Remove accessories (hats, hair, etc.)
                            for _, accessory in pairs(character:GetChildren()) do
                                if accessory:IsA("Accessory") or accessory:IsA("Hat") then
                                    accessory:Destroy()
                                end
                            end
                            
                            -- Remove clothing
                            local humanoid = character:FindFirstChild("Humanoid")
                            if humanoid then
                                for _, clothing in pairs(character:GetChildren()) do
                                    if clothing:IsA("Shirt") or clothing:IsA("Pants") or clothing:IsA("ShirtGraphic") then
                                        clothing:Destroy()
                                    end
                                end
                            end
                            
                            -- Remove 3D clothing and body parts
                            for _, part in pairs(character:GetDescendants()) do
                                if part:IsA("MeshPart") and part.Parent == character then
                                    -- Keep essential body parts but remove clothing meshes
                                    if not (part.Name == "Head" or part.Name == "Torso" or 
                                           part.Name == "Left Arm" or part.Name == "Right Arm" or
                                           part.Name == "Left Leg" or part.Name == "Right Leg" or
                                           part.Name == "UpperTorso" or part.Name == "LowerTorso" or
                                           part.Name == "LeftUpperArm" or part.Name == "RightUpperArm" or
                                           part.Name == "LeftLowerArm" or part.Name == "RightLowerArm" or
                                           part.Name == "LeftUpperLeg" or part.Name == "RightUpperLeg" or
                                           part.Name == "LeftLowerLeg" or part.Name == "RightLowerLeg" or
                                           part.Name == "LeftHand" or part.Name == "RightHand" or
                                           part.Name == "LeftFoot" or part.Name == "RightFoot") then
                                        part:Destroy()
                                    end
                                end
                                
                                -- Remove decals on body parts (clothing textures)
                                if part:IsA("BasePart") then
                                    for _, decal in pairs(part:GetChildren()) do
                                        if decal:IsA("Decal") or decal:IsA("Texture") then
                                            decal:Destroy()
                                        end
                                    end
                                end
                            end
                        end
                    end
                    wait(2) -- Update every 2 seconds
                end
            end)
            coroutine.resume(removeClothesCoroutine)
            
            Fluent:Notify({
                Title = "Roupas Removidas",
                Content = "Roupas e acessórios dos players foram removidos",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Remoção de Roupas Desativada",
                Content = "Novos players manterão suas roupas",
                Duration = 3
            })
        end
    end
})

-- SaveManager and InterfaceManager setup
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

-- Loads our interface
InterfaceManager:LoadInterface()

-- Loads the default config
SaveManager:LoadAutoloadConfig()
